#include "libAanvaller.nxc"

//Simple version of MorderControl()
/*
void MordorControl()
{
    switch(currentdrivestate.type)          //Be careful, may be new
    {
        case PROPORTIONAL:
            ProportionalDrive(-currentdrivestate.x, -currentdrivestate.y, 0, 100);
            break;
        case LINEAR:
            LinearDrive(-currentdrivestate.x, -currentdrivestate.y, 0);
            break;
        case ROTATIONAL:
            RotationalDrive(-currentdrivestate.x, -currentdrivestate.y, 0);
            break;
        case DIRECTIONAL:
            ProportionalDrive(-currentdrivestate.x, -currentdrivestate.y, 0, 100);
            break;
        case COMPASS:
            CompassDrive(currentdrivestate.dir + 180, currentdrivestate.dirvel, 0, 100);
            break;
    }
    Wait(2000);
}
*/

/* MordorControl():
 * Makes sure robot stays in line.
 * It remembers recent linecrossings, so that if it gets pushed over the line,
 * get stuck there due to it's own linecross prevention
 */
void MordorControl()
{
    static drivestate lastdrivestate; //Static inside function means value will be kept
    static unsigned long tlastdrivestate = 0;
    if(tlastdrivestate == 0) //If there is no stored drivestate
    {
        //Store current drivestate + timestamp
        lastdrivestate = currentdrivestate; //I think this works.. Thx NXC for auto struct assignment!
        tlastdrivestate = CurrentTick();
    }
    else if(CurrentTick() - tlastdrivestate < 2000) //If the stored drivestate is recent, same line is crossed again (Calib)
    {
        tlastdrivestate = CurrentTick(); //Update timestamp
    }
    else //Normal situation, old invalid state is stored
    {
        //Store current drivestate + timestamp
        lastdrivestate = currentdrivestate; //I think this works.. Thx NXC for auto struct assignment!
        tlastdrivestate = CurrentTick();
    }
    
    //Drive the opposite way
    switch(lastdrivestate) //In normal cases this equals switch(currentdrivestate)
    {
        case PROPORTIONAL:
            ProportionalDrive(-currentdrivestate.x, -currentdrivestate.y, 0, 100);
            break;
        case LINEAR:
            LinearDrive(-currentdrivestate.x, -currentdrivestate.y, 0);
            break;
        case ROTATIONAL:
            RotationalDrive(-currentdrivestate.x, -currentdrivestate.y, 0);
            break;
        case DIRECTIONAL:
            ProportionalDrive(-currentdrivestate.x, -currentdrivestate.y, 0, 100);
            break;
        case COMPASS:
            CompassDrive(currentdrivestate.dir + 180, currentdrivestate.dirvel, 0, 100);
            break;
    }
    //Wait till robot passed line + buffer (get the joke plz)
    while(lightval < WHITEGREEN) UpdateSensorValues();
    while(lightval > WHITEGREEN) UpdateSensorValues();
    Wait(100);   //(H2PO4)-/(HPO4)2- //Calib
}

/* Search():
 * Try to locate the ball.
 * Idea for improvement: go backwards while turning around, using CompassDrive
 */
void Search()
{
    RotationalDrive(0, 0, 40 * sign(balldir)); //Calib
}

/* Follow():
 * Follow the ball (turn and go to the ball)
 *
 */
void Follow()
{
    if(balldir == 0) LinearDrive(0, 100, 0); //If ball is in front go forward
    else if(currentballstate == FAR)
    {
        switch(abs(balldir))
        {
            case 1:
                LinearDrive(0, 100, 10 * sign(balldir));  //Calib
                break;
            case 2:
                LinearDrive(100 * sign(balldir), 0, 40 * sign(balldir));  //Calib
                //DirectionalDrive(45 * sign(dir), 100, 20 * sign(dir)); //In geval van goede sensor //Calib
                break;
            case 3:
                DirectionalDrive(0, 0, 100 * sign(balldir));  //Calib (goed rondje)

                break;
            case 4:
                DirectionalDrive(0, 0, 100 * sign(balldir));  //Calib (goed rondje)
                break;
        }
    }
    else
    {
        if(balldir == 0) LinearDrive(0, 50, 0);
        switch(abs(balldir))
        {
            case 1:
                LinearDrive(10 * sign(balldir), 75, 20 * sign(balldir));  //Calib
                break;
            case 2:
                LinearDrive(75 * sign(balldir), 0, 40 * sign(balldir));  //Calib
                //DirectionalDrive(45 * sign(dir), 100, 20 * sign(dir)); //In geval van goede sensor //Calib
                break;
            case 3:
                DirectionalDrive(0, 0, 50 * sign(balldir), 100);  //Calib (goed rondje)

                break;
            case 4:
                DirectionalDrive(0, 0, 50 * sign(balldir), 100);  //Calib (goed rondje)
                break;
        }
    }
}

/* Align():
 * Get behind the ball, while turning forward (towards the goal)
 */
void Align()
{
    int corrspeed = -orient / 2;
    if(corrspeed > 30) corrspeed = 30;
    if(corrspeed < -30) corrspeed = -30;
    switch(abs(balldir))
    {
        case 4:
            DirectionalDrive(-90 * sign(balldir),  75, corrspeed, 100);
            break;
        case 3:
            DirectionalDrive(-150 * sign(balldir), 100, corrspeed, 100);
            break;
        case 2:
            DirectionalDrive(150 * sign(balldir), 75, corrspeed, 100);
            break;
        case 1:
            DirectionalDrive(75 * sign(balldir), 100, corrspeed, 100);
            break;
        case 0:
            DirectionalDrive(0, 100, corrspeed, 100);
            break;
    }

}

/* Target():
 * (used when in possession);
 */
void Target()       //Vrot = Vx/r (Vrot is rotating speed, Vx is snelheid x-richting, r is de straal van de cirkel die de robot maakt)
{
    int r = 11.6;
    int Vrot = 50;
    if(abs(orient) < 13) // If robot almost pointed forward (towards goal)
    {
        //Drive forward a bit (but also turning a bit more to the goal) and kick
        if(orient < 0) LinearDrive(0, 100, -10);
        if(orient > 0) LinearDrive(0, 100,  10);
        Wait(500); //Calib
        if(CurrentTick() - tlastkick >= RECHARGINGTIME) Kick(); //Checks if kicker is charged
    }
    else //Turn to goal by circling around the ball, so no possession is lost
    {
        ProportionalDrive(80 * sign(orient), 30, -40 * sign(orient), 100);
    }
}

/* DistCheck():
 * Unused function made by soldeertim
 * Think it was used to quickly find the ball, in the first seconds after the ball
 * went from close to far. You can implement this using tclose, and tfar.
 * Name makes no sense.
 */
void DistCheck()
{
    switch(abs(balldir))
    {
        case 0:
            Follow();
            break;
        case 1:
            RotationalDrive(0, 0, 30 * sign(balldir));
            break;
        case 2:
            RotationalDrive(0, 0, 60 * sign(balldir));
            break;
        case 3:
            RotationalDrive(0, 0, 80 * sign(balldir));
            break;
        case 4:
            RotationalDrive(0, 0, 100 * sign(balldir));
            break;
    }
}

#define CHECKLINE //Comment this out if you don't want it spacing out while testing on random surfaces
#ifndef FUNCTIONTEST //Preprocessor wizardry so all function in file, except main can be included in functiontest

task main()
{
    LinearDrive(0,100,0);
    Init();
    Wait(200);
    while(true)
    {
        UpdateSensorValues();
        #ifdef CHECKLINE
        if(lightval > WHITEGREEN)
        {
            TextOut(0, LCD_LINE7, "MordorControl");
            MordorControl();
        }
        else
        #endif
            switch(currentballstate)
            {
                case POSSESSION:
                    TextOut(0, LCD_LINE8, "Target");
                    Target();
                    break;
                case CLOSE:
                    TextOut(0, LCD_LINE8, "Align");
                    Align();
                    break;
                case FAR:
                    TextOut(0, LCD_LINE8, "Follow");
                    Follow();
                    break;
                case LOST:
                    TextOut(0, LCD_LINE8, "Search");
                    Search();
                    break;
            }
    }
}

#endif
