#ifndef __LIB_AANVALLER_NXC__
#define __LIB_AANVALLER_NXC__

#define DISPLAYSENSOR

#include "\Drivers\NXTMMX.NXC"

//General
#define aproxequal(n1, n2, maxdif) (abs(n1-n2) < maxdif)

//Port aliases
#define IRSEEKERPORT S1
#define COMPASSPORT S2
#define LIGHTSENSORPORT S3
#define USSENSORPORT S4
#define MMXPORT S4

//Motorstuffs (to-do)
#define MOTORLEFT OUT_A     //snelheid van 50 komt overeen met ~1    rotation/sec
#define MOTORBACK OUT_B     //snelheid van 50 komt overeen met ~1.5  rotation/sec
#define MOTORRIGHT OUT_C    //snelheid van 50 komt overeen met ~1.35 rotation/sec
#define MOTORALL OUT_ABC

//Kicker
#define RECHARGINGTIME 4000 //Calib
#define KICKTIME 30 //Calib
unsigned long tlastkick = 0;

void Kick()
{
    MMX_Run_Unlimited(MMXPORT, 0x06, MMX_Motor_2, MMX_Direction_Forward, 100);
    Wait(KICKTIME);   //Hou zo laag mogelijk. => Save energy! Save the planet!
    MMX_Stop(MMXPORT, 0x06, MMX_Motor_2, MMX_Next_Action_Float);
    tlastkick = CurrentTick();
}

//SensorStorage
byte lightval;
byte usval;
int orient;
int balldist, lastballdist = 0;
char balldir, lastballdir = 1;
byte currentballstate;
unsigned long tlastseen, losttime, tlastinfront, infronttime;

//Light Calib
#define WHITE 20 //Calib
#define GREEN 5 //Calib
#define WHITEGREEN 15 //Calib

//IRBall
#define POSSESSTHRES 240 //USsensor //Calib
#define LOSSTHRES 200 //Calib
#define FARCLOSE 50 //Calib

//USsensor
#define USTHRASH 7

enum ballstate
{
    LOST,
    FAR,
    CLOSE,
    POSSESSION
};

unsigned long tfar, tclose;

void HTEnhancedIRSeekerV2(const byte port, int &dir = balldir, int &strength = balldist)
{
    int cResp;
    byte cmdBuf[] = {0x10, 0x43};
    byte respBuf[];
    bool fSuccess;
    int i, iMax;
    long dcSigSum, dcStr;
    
    dir = 0;
    strength = 0;
    
    // Read DC mode
    cResp=6;
    fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
    if (fSuccess)
    {
        // Find the max DC sig strength
        iMax = 0;
        for (i=1; i<5; i++) if (respBuf[i] > respBuf[iMax]) iMax = i;
        // Calc base DC direction value
        dir = iMax*2+1;
        // Set base dcStrength based on max signal and average
        dcSigSum = respBuf[iMax] + respBuf[5];
        // Check signal strength of neighboring sensor elements
        if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2))
        {
            dir--;
            dcSigSum += respBuf[iMax-1];
        }
        if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2))
        {
            dir++;
            dcSigSum += respBuf[iMax+1];
        }
        // Make DC strength compatible with AC strength.
        //dcSigSum *= 500;
        //dcStr = 1;
        //repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;
        dcStr = sqrt(dcSigSum * 500);
        strength = dcStr;
        // Decide if using DC strength
        if (strength <= 200)
        {
            // Use AC Dir
            dir = 0; strength = 0;
            cmdBuf[1] = 0x49;
            cResp=6;
            fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
            if (fSuccess)
            {
                dir = respBuf[0];
                // Sum the sensor elements to get strength
                if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
            }
        }
    }
}

//Compass
int compassbeginval;

safecall int RelCompassVal()
{
    int relval = SensorHTCompass(COMPASSPORT) - compassbeginval;
    while(relval <= -180) relval += 360;
    while(relval >   180) relval -= 360;
    return relval;
}

//Drive Stuff /*to-do*/

enum drivetype
{
    PROPORTIONAL,
    LINEAR,
    ROTATIONAL,
    DIRECTIONAL,
    COMPASS
};

struct drivestate
{
    char x;             //positief = rechts
    char y;             //positief = vooruit
    char rot;           //positief = met de klok mee
    byte pwr;
    int dir;
    char dirvel;
    byte type;
};

drivestate currentdrivestate;


/*
 * ProportionalDrive: Give proportions in -100 to 100, and power.
 * For best accurracy use even numbers
 * If arguments are beyond limits expect undefined behaviour.
 * These flaws are left in for the sake of speed.
 * This is the semi optimised version
 */
 
void ProportionalDrive(const char x, const char y, const char rot, const byte pwr = 100)
{
    int r,l,b; //right, left, back
    int max;
    r = (x >> 1) - (y * 111 >> 7) + rot;
    l = (x >> 1) + (y * 111 >> 7) + rot;
    b = -x + rot;
    max = ( (abs(r) > abs(l)) ? abs(r) : abs(l));
    max = ((max > abs(b)) ? max : abs(b));
    r = r * pwr / max;
    l = l * pwr / max;
    b = b * pwr / max;
    OnRev(MOTORRIGHT, r); //Should all be corresponding to polarity in which wheels turn left (robot turns right)
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.pwr = pwr;
    currentdrivestate.type = PROPORTIONAL;
}

void LinearDrive(const char x, const char y, char rot)
{
    int r,l,b,max,min;
    r = (x >> 1) - y;
    l = (x >> 1) + y;
    b = -x;
    max = ((abs(r) > abs(l)) ? abs(r) : abs(l));
    if(max > 100)
    {
        r = r * 100 / max;
        l = l * 100 / max;
        b = b * 100 / max;
    }
    else
    {
        max = ((r > l) ? r : l);
        max = ((max > b) ? max : b);
        min = ((r < l) ? r : l);
        min = ((min < b) ? min : b);
        if(rot + max > 100) rot = 100 - max;
        if(rot + min < -100) rot = -100 - min;
        r += rot;
        l += rot;
        b += rot;
    }
    OnRev(MOTORRIGHT, r);
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.type = LINEAR;
}

void RotationalDrive(const char x, const char y, const char rot)
{
    int r,l,b,max,min;
    r = (x >> 1) - y;
    l = (x >> 1) + y;
    b = -x;
    max = ((r > l) ? r : l);
    max = ((max > b) ? max : b);
    min = ((r < l) ? r : l);
    min = ((min < b) ? min : b);
    if(max + rot > 100 || min + rot < -100)
    {
        r = r * (100 * sign(rot) - rot) / 100 + rot;
        l = l * (100 * sign(rot) - rot) / 100 + rot;
        b = b * (100 * sign(rot) - rot) / 100 + rot;
    }
    else
    {
        r += rot;
        l += rot;
        b += rot;
    }
    OnRev(MOTORRIGHT, r);
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.type = ROTATIONAL;
}

void DirectionalDrive(int dir, const char dirvel, const char rotvel, const byte pwr = 100)
{
    int x, y;
    x = (sind(dir) * dirvel);
    y = (cosd(dir) * dirvel);
    ProportionalDrive(x, y, rotvel, pwr);
    currentdrivestate.dir = dir;
    currentdrivestate.type = DIRECTIONAL;
}

void CompassDrive(int reldir, const char dirvel, const char rotvel, const byte pwr = 100)
{
    int x, y;
    reldir -= orient;
    while(reldir <= -180) reldir += 360;
    while(reldir >   180) reldir -= 360;
    DirectionalDrive(reldir, dirvel, rotvel, pwr);
    currentdrivestate.dir = reldir;
    currentdrivestate.type = COMPASS;
}

//Field dimensions (in cm)
#define STADIUMWIDTH 182
#define STADIUMLENGTH 244

#define FIELDWIDTH 122
#define FIELDLENGTH 184

#define GOALWIDTH 60
#define GOALWALLDIST 61
#define GOALDEPTH 10

//Display
void DrawSensorLabels()
{
    TextOut(0,  LCD_LINE1, "IRdir:");
    TextOut(0,  LCD_LINE2, "IRdist:");
    TextOut(0,  LCD_LINE3, "Compass:");
    TextOut(0,  LCD_LINE4, "Light:");
    TextOut(0,  LCD_LINE5, "Dist:");
}

void UpdateSensorValues()
{
    HTEnhancedIRSeekerV2(IRSEEKERPORT, balldir, balldist);
    orient = RelCompassVal();
    lightval = Sensor(S3); //The proper way
    usval = SensorUS(USSENSORPORT);
    
    //Fck big data analysis. Small data analysis FTW!
    if(balldist == 0)
    {
        losttime = CurrentTick() - tlastseen;
        if(losttime > 200) currentballstate = LOST; //Calib
        balldir = lastballdir;
        balldist = lastballdist;
    }
    else
    {
        tlastseen = CurrentTick();
        lastballdir = balldir;
        lastballdist = balldist;
        if(usval <= USTHRASH && balldir == 5) currentballstate = POSSESSION;
        else
        {
            if(balldist > FARCLOSE)
            {
                currentballstate = CLOSE;
                tclose = CurrentTick();
            }
            else
            {
                currentballstate = FAR;
                tfar = CurrentTick();
            }
        }
        /*
        if(balldir == 5 && balldist > POSSESSTHRES) ballstate = POSSESSION;
        else if((balldist > LOSSTHRES && ballstate != POSSESSION) || balldist <= LOSSTHRES)
        {
            if(balldist > FARCLOSE) ballstate = CLOSE;
            else ballstate = FAR;
        }
        */
    }
    balldir -= 5;
    balldir = -balldir; //Optional flip so that rightward values are positive
    if(abs(balldir) <= 1)
    {
        if(!tlastinfront) tlastinfront = CurrentTick();
        infronttime = CurrentTick() - tlastinfront;
    }
    else
    {
        tlastinfront = 0;
        infronttime = 0;
    }
    
    NumOut(50,  LCD_LINE1, balldir, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE2, balldist, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE3, orient, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE4, lightval, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE5, usval, DRAW_OPT_CLEAR_EOL);
    
    switch(currentballstate)
    {
        case POSSESSION:
            TextOut(0, LCD_LINE7, "POSSESSION", DRAW_OPT_CLEAR_EOL);
            break;
        case CLOSE:
            TextOut(0, LCD_LINE7, "CLOSE", DRAW_OPT_CLEAR_EOL);
            break;
        case FAR:
            TextOut(0, LCD_LINE7, "FAR", DRAW_OPT_CLEAR_EOL);
            break;
        case LOST:
            TextOut(0, LCD_LINE7, "LOST", DRAW_OPT_CLEAR_EOL);
            break;
    }
}

//Initialisation
void Init()
{
    SetSensorLowspeed(IRSEEKERPORT);
    SetSensorLowspeed(COMPASSPORT);
    SetSensorType(LIGHTSENSORPORT, SENSOR_TYPE_LIGHT);
    SetSensorMode(LIGHTSENSORPORT, SENSOR_MODE_PERCENT);
    MMX_Init(MMXPORT, 0x06, MMX_Profile_NXT_Motors);
    compassbeginval = SensorHTCompass(COMPASSPORT);
    DrawSensorLabels();
}

#endif

