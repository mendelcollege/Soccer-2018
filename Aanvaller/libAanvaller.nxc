#ifndef __LIB_AANVALLER_NXC__
#define __LIB_AANVALLER_NXC__

#define DISPLAYSENSORVALS //Zie UpdateSensorValues()

#include "\Drivers\NXTMMX.nxc" //Mindsensors NXT Motor Multiplexor Driver



#################
# Port Aliasses #
#################

#define IRSEEKERPORT S1
#define COMPASSPORT S2
#define LIGHTSENSORPORT S3
#define USSENSORPORT S4
#define MMXPORT S4
#define MOTORLEFT OUT_A
#define MOTORBACK OUT_B
#define MOTORRIGHT OUT_C
#define MOTORALL OUT_ABC



################
# KICKERSTUFFS #
################

#define RECHARGINGTIME 4000 //Minimale tijd tussen kicks zodat kicker kan opladen
#define KICKTIME 30 //Tijd dat relais ingeschakeld is

unsigned long tlastkick = 0; //Tijd dat er voor het laatst gekickt is

/* Kick():
 * Zet M2 van de controller voor een korte tijd op 100% power,
 * zodat er 9V op de relais staat, en de stroomkring van de kicker sluit
 */
void Kick()
{
    MMX_Run_Unlimited(MMXPORT, 0x06, MMX_Motor_2, MMX_Direction_Forward, 100);
    Wait(KICKTIME);   //Hou zo laag mogelijk. => Save energy! Save the planet!
    MMX_Stop(MMXPORT, 0x06, MMX_Motor_2, MMX_Next_Action_Float);
    tlastkick = CurrentTick();
}



######################
# SENSORDATA STORAGE #
######################

byte lightval, usval; //Waarde licht- en afstandssensor
int orient; //Orientatie, genormaliseerd aantal graden dat de robot met de klok mee is gedraaid vanaf het starten van het programma
int balldist, lastballdist = 0; //Sterkte van IR signaal
char balldir, lastballdir = 1; //Richting van IR signaalm, van -4 tot 4
byte currentballstate; //De huidige status van de bal, zie enum ballstate
unsigned long tlastseen, losttime, tlastinfront, infronttime; //Tijdstip en tijdsduur dat de bal wel/niet gezien is / voor de robot is
unsigned long tfar, tclose;

enum ballstate
{
    LOST,
    FAR,
    CLOSE,
    POSSESSION
};



######################
# SENSOR CALIBRATION #
######################

//Lightsensor calibrative values
#define WHITE 20
#define GREEN 5
#define WHITEGREEN 10

//IRSeeker calibrative values
#define POSSESSTHRES 240
#define LOSSTHRES 200
#define FARCLOSE 60
#define FRONTFARCLOSE 120

//USsensor calibrative values
#define USTHRASH 7 //Ultrasone waarde waaronder de bal in het bezit is



############
# IRSEEKER #
############

/* HTEnhancedIRSeekerV2():
 * Leest de IRSeeker, combineert DC en AC informatie,
 * en stopt de informatie in gegeven variabelen (als standaard balldir + balldist)
 */
void HTEnhancedIRSeekerV2(const byte port, int &dir = balldir, int &strength = balldist)
{
    int cResp;
    byte cmdBuf[] = {0x10, 0x43};
    byte respBuf[];
    bool fSuccess;
    int i, iMax;
    long dcSigSum, dcStr;
    
    dir = 0;
    strength = 0;
    
    // Read DC mode
    cResp=6;
    fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
    if (fSuccess)
    {
        // Find the max DC sig strength
        iMax = 0;
        for (i=1; i<5; i++) if (respBuf[i] > respBuf[iMax]) iMax = i;
        // Calc base DC direction value
        dir = iMax*2+1;
        // Set base dcStrength based on max signal and average
        dcSigSum = respBuf[iMax] + respBuf[5];
        // Check signal strength of neighboring sensor elements
        if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2))
        {
            dir--;
            dcSigSum += respBuf[iMax-1];
        }
        if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2))
        {
            dir++;
            dcSigSum += respBuf[iMax+1];
        }
        // Make DC strength compatible with AC strength.
        //dcSigSum *= 500;
        //dcStr = 1;
        //repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;
        dcStr = sqrt(dcSigSum * 500);
        strength = dcStr;
        // Decide if using DC strength
        if (strength <= 200)
        {
            // Use AC Dir
            dir = 0; strength = 0;
            cmdBuf[1] = 0x49;
            cResp=6;
            fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
            if (fSuccess)
            {
                dir = respBuf[0];
                // Sum the sensor elements to get strength
                if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
            }
        }
    }
}



###########
# COMPASS #
###########

int compassbeginval; //Waarde van kompas aan het begin om berekeningen te doen

/* RelCompassVal():
 * Berekent de genormaliseerde kompaswaarde relatief tot start van programma
 */
safecall int RelCompassVal()
{
    int relval = SensorHTCompass(COMPASSPORT) - compassbeginval;
    while(relval <= -180) relval += 360;
    while(relval >   180) relval -= 360;
    return relval;
}



################
# DRIVE STUFFS #
################

/* All driving functions assume:
 *      - positive = counter-clockwise rotation of wheel
 *      - three motors with 60 degrees inbetween
 *      - all motors are placed the same distance off their center
 * Note that 1 bitshift to the right (... >> 1) is equivalent to dividing by 2, but faster
 * Also know what the (... ? ... : ...) operator does (conditional expression)
 */


enum drivetype //Verschillende soorten van motoraansturing
{
    PROPORTIONAL,
    LINEAR,
    ROTATIONAL,
    DIRECTIONAL,
    COMPASS
};

struct drivestate //Structure om rijden mee te beschrijven
{
    char x;             //positief = rechts
    char y;             //positief = vooruit
    char rot;           //positief = met de klok mee
    byte pwr;
    int dir;            //positief = heeft een snelheid naar rechts (behalve 0, 180)
    char dirvel;        //snelheid in die richting
    byte type;          //manier van aansturing, zie enum drivetype
};

drivestate currentdrivestate; //Variabele met informatie over hoe de robot op dit moment rijdt

/* ProportionalDrive(speedx, speedy, speedrot, pwr):
 * All paramters are -100 - 100.
 * Speedx, speedy speedrot are the rightward, forward and rotational speeds,
 * as a percentage relative to their maximum speeds, but in proportion (xmax = ymax in real world)
 * All proportions are kept intact.
 *
 * For best accurracy use even numbers.
 * If parameters are beyond limits expect undefined behaviour.
 * This flaw are left in for the sake of speed.
 * It also updates currentdrivestate
 */
void ProportionalDrive(const char x, const char y, const char rot, const byte pwr = 100)
{
    int r,l,b; //right, left, back
    int max;
    //Calculate
    r = (x >> 1) - (y * 111 >> 7) + rot; //(... * 111 >> 7) = (sqrt(...)/2) (faster approximation)
    l = (x >> 1) + (y * 111 >> 7) + rot;
    b = -x + rot;
    //Normalize
    max = ( (abs(r) > abs(l)) ? abs(r) : abs(l));
    max = ((max > abs(b)) ? max : abs(b));
    r = r * pwr / max;
    l = l * pwr / max;
    b = b * pwr / max;
    //Execute
    OnRev(MOTORRIGHT, r); 
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.pwr = pwr;
    currentdrivestate.type = PROPORTIONAL;
}

/* LinearDrive(speedx, speedy, speedrot):
 * All paramters are -100 - 100.
 * Speedx, speedy speedrot are the rightward, forward and rotational speeds,
 * as a percentage relative to their maximum speeds.
 * The linear speeds however, will "push away" the rotational speed.
 * Note that the maximum speed of x and y have different real-world speeds (I think y is faster)
 */
void LinearDrive(const char x, const char y, char rot)
{
    int r,l,b,max,min;
    r = (x >> 1) - y;
    l = (x >> 1) + y;
    b = -x;
    max = ((abs(r) > abs(l)) ? abs(r) : abs(l));
    if(max > 100) //If max power > 100, we can normalize and forget rot
    {
        r = r * 100 / max;
        l = l * 100 / max;
        b = b * 100 / max;
    }
    else //Adjust rot for left over power/speed to use
    {
        //Calculate max
        max = ((r > l) ? r : l);
        max = ((max > b) ? max : b);
        //Calculate min
        min = ((r < l) ? r : l);
        min = ((min < b) ? min : b);
        //Check if adding rot will make motor values more than 100, if not adjust
        if(rot + max > 100) rot = 100 - max;
        if(rot + min < -100) rot = -100 - min;
        //Add rotation part to motor values
        r += rot;
        l += rot;
        b += rot;
    }
    //Execute
    OnRev(MOTORRIGHT, r);
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.type = LINEAR;
}

/* RotationalDrive(speedx, speedy, speedrot):
 * All paramters are -100 - 100.
 * Speedx, speedy speedrot are the rightward, forward and rotational speeds,
 * as a percentage relative to their maximum speeds
 * The rotational speed however, will "push away" linear speeds
 * Note that the maximum speed of x and y have different real-world speeds (I think y is faster)
 */
void RotationalDrive(const char x, const char y, const char rot)
{
    int r,l,b,max,min;
    //Calculate motor values for driving
    r = (x >> 1) - y;
    l = (x >> 1) + y;
    b = -x;
    //Calculate max motor value
    max = ((r > l) ? r : l);
    max = ((max > b) ? max : b);
    min = ((r < l) ? r : l);
    min = ((min < b) ? min : b);
    //If adding rotational speed will make any motor value > 100)
    if(max + rot > 100 || min + rot < -100)
    {
        //Scale drivespeed
        r = r * (100 - abs(rot)) / 100;
        l = l * (100 - abs(rot)) / 100;
        b = b * (100 - abs(rot)) / 100;
    }
    //Add rotational speed
    r += rot;
    l += rot;
    b += rot;
    //Execute
    OnRev(MOTORRIGHT, r);
    OnRev(MOTORLEFT, l);
    OnRev(MOTORBACK, b);
    currentdrivestate.x = x;
    currentdrivestate.y = y;
    currentdrivestate.rot = rot;
    currentdrivestate.type = ROTATIONAL;
}

/* DirectionalDrive(direction, directional velocity, rotational velocity, power):
 * Drives in a certain direction given in degrees clockwise of driving forward (-180 - 180).
 * Use directional and rotational velocity to specify proportion of power of driving an rotating.
 * Specify optionally specify maximum power
 * (It uses proportionaldrive)
 */
void DirectionalDrive(int dir, const char dirvel, const char rotvel, const byte pwr = 100)
{
    int x, y;
    //Calculate
    x = (sind(dir) * dirvel);
    y = (cosd(dir) * dirvel);
    //Excetiute
    ProportionalDrive(x, y, rotvel, pwr);
    //Overwrites some things done in ProportionalDrive
    currentdrivestate.dir = dir;
    currentdrivestate.type = DIRECTIONAL;
}

/* Compass(direction, directional velocity, rotational velocity, power):
 * Same as directionaldrive, but now not relative to the robot but to the field / orientation at start
 * Uses directionaldrive but compensates for any orientation offset.
 * You can do cool stuff with this!!! (Like turning while keeping the same direction)
 */
void CompassDrive(int reldir, const char dirvel, const char rotvel, const byte pwr = 100)
{
    int x, y;
    //Calculate and normalize
    reldir -= orient;
    while(reldir <= -180) reldir += 360;
    while(reldir >   180) reldir -= 360;
    //Execute
    DirectionalDrive(reldir, dirvel, rotvel, pwr);
    //Overwrites some things done in DirectionalDrive
    currentdrivestate.dir = reldir;
    currentdrivestate.type = COMPASS;
}



####################
# FIELD DIMENSIONS #
####################

#define STADIUMWIDTH 182
#define STADIUMLENGTH 244

#define FIELDWIDTH 122
#define FIELDLENGTH 184

#define GOALWIDTH 60
#define GOALWALLDIST 61
#define GOALDEPTH 10



#################################
# THINGS TO DO WITH SENSOR DATA #
#################################

/* DrawSensorLabels():
 * Draws labels on the screen for the sensor data displaying.
 */
void DrawSensorLabels()
{
    TextOut(0,  LCD_LINE1, "IRdir:");
    TextOut(0,  LCD_LINE2, "IRdist:");
    TextOut(0,  LCD_LINE3, "Compass:");
    TextOut(0,  LCD_LINE4, "Light:");
    TextOut(0,  LCD_LINE5, "Dist:");
}

/* UpdateSensorValues():
 * Reads out the sensors, analyzes data, and stores ballstate and timestamps.
 */
void UpdateSensorValues()
{
    //Read sensor values
    HTEnhancedIRSeekerV2(IRSEEKERPORT, balldir, balldist);
    orient = RelCompassVal();
    lightval = Sensor(S3); //The proper way
    usval = SensorUS(USSENSORPORT);

    //Fck big data analysis. Small data analysis FTW!
    if(balldist == 0) //If ball is not detected
    {
        losttime = CurrentTick() - tlastseen; //Calculate the time the ball is lost
        if(losttime > 100) currentballstate = LOST; //Ball is lost if not seen for 0,1 sec (calibrate)
        //Use last useful data
        balldir = lastballdir;
        balldist = lastballdist;
    }
    else //If ball is detected
    {
        //Back up data, update time last seen
        tlastseen = CurrentTick();
        lastballdir = balldir;
        lastballdist = balldist;

        //If distance to ball is less than thresthold, and ball direction is in front
        if(usval < USTHRASH && balldir == 5) currentballstate = POSSESSION;
        else
        {
                //Else check if close or not, update timestamps
                if(balldist > FARCLOSE && balldir < 4 && balldir > 6)
                {
                    currentballstate = CLOSE;
                    tclose = CurrentTick();
                }
                if(balldist > FRONTFARCLOSE && balldir >= 4 && balldir <= 6)
                {
                    currentballstate = CLOSE;
                    tclose = CurrentTick();
                }
                else
                {
                    currentballstate = FAR;
                    tfar = CurrentTick();
                }
        }
        //Old system with no US sensor
        /* 
        if(balldir == 5 && balldist > POSSESSTHRES) ballstate = POSSESSION;
        else if((balldist > LOSSTHRES && ballstate != POSSESSION) || balldist <= LOSSTHRES)
        {
            if(balldist > FARCLOSE) ballstate = CLOSE;
            else ballstate = FAR;
        }
        */
    }
    balldir -= 5; //Subtract 5, so that 0 is middle
    balldir = -balldir; //Flip so that rightward values are positive
    if(abs(balldir) <= 1) //If ball in front calculate
    {
        if(!tlastinfront) tlastinfront = CurrentTick(); //Set timestamp if not 0
        infronttime = CurrentTick() - tlastinfront; //Calculate time in front
    }
    else //Reset timestamps and time in front
    {
        tlastinfront = 0;
        infronttime = 0;
    }

    #ifdef DISPLAYSENSORVALS
    NumOut(50,  LCD_LINE1, balldir, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE2, balldist, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE3, orient, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE4, lightval, DRAW_OPT_CLEAR_EOL);
    NumOut(50,  LCD_LINE5, usval, DRAW_OPT_CLEAR_EOL);
    switch(currentballstate) //Display ball state
    {
        case POSSESSION:
            TextOut(0, LCD_LINE7, "POSSESSION", DRAW_OPT_CLEAR_EOL);
            break;
        case CLOSE:
            TextOut(0, LCD_LINE7, "CLOSE", DRAW_OPT_CLEAR_EOL);
            break;
        case FAR:
            TextOut(0, LCD_LINE7, "FAR", DRAW_OPT_CLEAR_EOL);
            break;
        case LOST:
            TextOut(0, LCD_LINE7, "LOST", DRAW_OPT_CLEAR_EOL);
            break;
    }
    #endif
}



###################################
# INITIALISATION OF ALL THE STUFF #
###################################

/* Init():
 * Sets up sensors, and does other initialization stuff
 */
void Init()
{
    SetSensorLowspeed(IRSEEKERPORT);
    SetSensorLowspeed(COMPASSPORT);
    SetSensorType(LIGHTSENSORPORT, SENSOR_TYPE_LIGHT);
    SetSensorMode(LIGHTSENSORPORT, SENSOR_MODE_PERCENT);
    MMX_Init(MMXPORT, 0x06, MMX_Profile_NXT_Motors); //Calls SetSensorLowspeed
    //Store starting orientation, which should equal robot pointing straight forward
    //Lots of other things use this
    compassbeginval = SensorHTCompass(COMPASSPORT);
    #ifdef DISPLAYSENSORVALS
    DrawSensorLabels();
    #endif
}

#endif

